#!/usr/bin/python2
import os
import sys
import getopt
from sys import stderr
import boto
import boto.ec2
import multiprocessing

# get instance detailed information
def get_instances_list(_conn):
  instances_list = []
  for reservation in _conn.get_all_instances():
    instances_list.extend(reservation.instances)
  return instances_list

# print instance info as table
def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print row_format.format(*row)

# print out instances list
def find_instances(tags, _conn):
  instance_pairs = []
  for instance in get_instances_list(_conn):
      if instance.state != "running":
        continue

      instance_name = "%s-%s" % (instance.tags.get("Name"), instance.id)
      if instance_name == None or instance_name == '':
        instance_name = instance.id

      if len(tags) == 0 or all(tag.strip() in instance_name for tag in tags):
        service_name = instance.tags.get("service")
        public_dns = instance.public_dns_name
        if public_dns == None or public_dns == '':
          public_dns = instance.ip_address
        if service_name == None or service_name == '':
          service_name = ''
        pair = [instance_name, instance.public_dns_name, instance.id, instance.private_ip_address, instance.ip_address, instance.instance_type, str(instance._placement), service_name]
        instance_pairs.append(pair)
  return sorted(instance_pairs, key=lambda p: p[0])

def account_map(account):
    return find_instances(account['tags'], boto.ec2.connect_to_region(account['region'],
      aws_access_key_id=account['k'],
      aws_secret_access_key=account['s'])
    )

# parse given parameters
def main(argv):
    accounts = [
      {
        "k": "{{ account 0 key }}",
        "s": "{{ account 0 secret }}"
      },
      {
        "k": "{{ account 1 key }}",
        "s": "{{ account 1 secret }}"
      }
    ]

    [x.update({"tags": argv[:-1], "region": argv[-1]}) for x in accounts]

    pool = multiprocessing.Pool()
    print_table([instance for region in pool.map(account_map, accounts) for instance in region])
    sys.exit()

# run program
if __name__ == "__main__":
    main(sys.argv[1:])
